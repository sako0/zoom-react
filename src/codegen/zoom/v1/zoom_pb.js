// source: zoom/v1/zoom.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.zoom.v1.CreateZoomRequest', null, global);
goog.exportSymbol('proto.zoom.v1.CreateZoomResponse', null, global);
goog.exportSymbol('proto.zoom.v1.GetZoomListRequest', null, global);
goog.exportSymbol('proto.zoom.v1.GetZoomListResponse', null, global);
goog.exportSymbol('proto.zoom.v1.ZoomInfo', null, global);
goog.exportSymbol('proto.zoom.v1.ZoomMeetingInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zoom.v1.CreateZoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zoom.v1.CreateZoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zoom.v1.CreateZoomRequest.displayName = 'proto.zoom.v1.CreateZoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zoom.v1.CreateZoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zoom.v1.CreateZoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zoom.v1.CreateZoomResponse.displayName = 'proto.zoom.v1.CreateZoomResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zoom.v1.GetZoomListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zoom.v1.GetZoomListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zoom.v1.GetZoomListRequest.displayName = 'proto.zoom.v1.GetZoomListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zoom.v1.GetZoomListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zoom.v1.GetZoomListResponse.repeatedFields_, null);
};
goog.inherits(proto.zoom.v1.GetZoomListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zoom.v1.GetZoomListResponse.displayName = 'proto.zoom.v1.GetZoomListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zoom.v1.ZoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zoom.v1.ZoomInfo.repeatedFields_, null);
};
goog.inherits(proto.zoom.v1.ZoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zoom.v1.ZoomInfo.displayName = 'proto.zoom.v1.ZoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zoom.v1.ZoomMeetingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zoom.v1.ZoomMeetingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zoom.v1.ZoomMeetingInfo.displayName = 'proto.zoom.v1.ZoomMeetingInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zoom.v1.CreateZoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zoom.v1.CreateZoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zoom.v1.CreateZoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.CreateZoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth0Id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zoom.v1.CreateZoomRequest}
 */
proto.zoom.v1.CreateZoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zoom.v1.CreateZoomRequest;
  return proto.zoom.v1.CreateZoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zoom.v1.CreateZoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zoom.v1.CreateZoomRequest}
 */
proto.zoom.v1.CreateZoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuth0Id(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zoom.v1.CreateZoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zoom.v1.CreateZoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zoom.v1.CreateZoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.CreateZoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth0Id();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string auth0_id = 1;
 * @return {string}
 */
proto.zoom.v1.CreateZoomRequest.prototype.getAuth0Id = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.CreateZoomRequest} returns this
 */
proto.zoom.v1.CreateZoomRequest.prototype.setAuth0Id = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zoom.v1.CreateZoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zoom.v1.CreateZoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zoom.v1.CreateZoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.CreateZoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    joinUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zoom.v1.CreateZoomResponse}
 */
proto.zoom.v1.CreateZoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zoom.v1.CreateZoomResponse;
  return proto.zoom.v1.CreateZoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zoom.v1.CreateZoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zoom.v1.CreateZoomResponse}
 */
proto.zoom.v1.CreateZoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJoinUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zoom.v1.CreateZoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zoom.v1.CreateZoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zoom.v1.CreateZoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.CreateZoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJoinUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.zoom.v1.CreateZoomResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zoom.v1.CreateZoomResponse} returns this
 */
proto.zoom.v1.CreateZoomResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string created_at = 2;
 * @return {string}
 */
proto.zoom.v1.CreateZoomResponse.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.CreateZoomResponse} returns this
 */
proto.zoom.v1.CreateZoomResponse.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string join_url = 3;
 * @return {string}
 */
proto.zoom.v1.CreateZoomResponse.prototype.getJoinUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.CreateZoomResponse} returns this
 */
proto.zoom.v1.CreateZoomResponse.prototype.setJoinUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string start_url = 4;
 * @return {string}
 */
proto.zoom.v1.CreateZoomResponse.prototype.getStartUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.CreateZoomResponse} returns this
 */
proto.zoom.v1.CreateZoomResponse.prototype.setStartUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string topic = 5;
 * @return {string}
 */
proto.zoom.v1.CreateZoomResponse.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.CreateZoomResponse} returns this
 */
proto.zoom.v1.CreateZoomResponse.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zoom.v1.GetZoomListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zoom.v1.GetZoomListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zoom.v1.GetZoomListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.GetZoomListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    zoomToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zoom.v1.GetZoomListRequest}
 */
proto.zoom.v1.GetZoomListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zoom.v1.GetZoomListRequest;
  return proto.zoom.v1.GetZoomListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zoom.v1.GetZoomListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zoom.v1.GetZoomListRequest}
 */
proto.zoom.v1.GetZoomListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrganizationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZoomToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zoom.v1.GetZoomListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zoom.v1.GetZoomListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zoom.v1.GetZoomListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.GetZoomListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getZoomToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 organization_id = 1;
 * @return {number}
 */
proto.zoom.v1.GetZoomListRequest.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zoom.v1.GetZoomListRequest} returns this
 */
proto.zoom.v1.GetZoomListRequest.prototype.setOrganizationId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string zoom_token = 2;
 * @return {string}
 */
proto.zoom.v1.GetZoomListRequest.prototype.getZoomToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.GetZoomListRequest} returns this
 */
proto.zoom.v1.GetZoomListRequest.prototype.setZoomToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zoom.v1.GetZoomListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zoom.v1.GetZoomListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.zoom.v1.GetZoomListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zoom.v1.GetZoomListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.GetZoomListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoomListList: jspb.Message.toObjectList(msg.getZoomListList(),
    proto.zoom.v1.ZoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zoom.v1.GetZoomListResponse}
 */
proto.zoom.v1.GetZoomListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zoom.v1.GetZoomListResponse;
  return proto.zoom.v1.GetZoomListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zoom.v1.GetZoomListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zoom.v1.GetZoomListResponse}
 */
proto.zoom.v1.GetZoomListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zoom.v1.ZoomInfo;
      reader.readMessage(value,proto.zoom.v1.ZoomInfo.deserializeBinaryFromReader);
      msg.addZoomList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zoom.v1.GetZoomListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zoom.v1.GetZoomListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zoom.v1.GetZoomListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.GetZoomListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoomListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.zoom.v1.ZoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ZoomInfo zoom_list = 1;
 * @return {!Array<!proto.zoom.v1.ZoomInfo>}
 */
proto.zoom.v1.GetZoomListResponse.prototype.getZoomListList = function() {
  return /** @type{!Array<!proto.zoom.v1.ZoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zoom.v1.ZoomInfo, 1));
};


/**
 * @param {!Array<!proto.zoom.v1.ZoomInfo>} value
 * @return {!proto.zoom.v1.GetZoomListResponse} returns this
*/
proto.zoom.v1.GetZoomListResponse.prototype.setZoomListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.zoom.v1.ZoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zoom.v1.ZoomInfo}
 */
proto.zoom.v1.GetZoomListResponse.prototype.addZoomList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.zoom.v1.ZoomInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zoom.v1.GetZoomListResponse} returns this
 */
proto.zoom.v1.GetZoomListResponse.prototype.clearZoomListList = function() {
  return this.setZoomListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zoom.v1.ZoomInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zoom.v1.ZoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zoom.v1.ZoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zoom.v1.ZoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.ZoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoomUserId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    zoomMeetingListList: jspb.Message.toObjectList(msg.getZoomMeetingListList(),
    proto.zoom.v1.ZoomMeetingInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zoom.v1.ZoomInfo}
 */
proto.zoom.v1.ZoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zoom.v1.ZoomInfo;
  return proto.zoom.v1.ZoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zoom.v1.ZoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zoom.v1.ZoomInfo}
 */
proto.zoom.v1.ZoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZoomUserId(value);
      break;
    case 2:
      var value = new proto.zoom.v1.ZoomMeetingInfo;
      reader.readMessage(value,proto.zoom.v1.ZoomMeetingInfo.deserializeBinaryFromReader);
      msg.addZoomMeetingList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zoom.v1.ZoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zoom.v1.ZoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zoom.v1.ZoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.ZoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoomUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getZoomMeetingListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.zoom.v1.ZoomMeetingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string zoom_user_id = 1;
 * @return {string}
 */
proto.zoom.v1.ZoomInfo.prototype.getZoomUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.ZoomInfo} returns this
 */
proto.zoom.v1.ZoomInfo.prototype.setZoomUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ZoomMeetingInfo zoom_meeting_list = 2;
 * @return {!Array<!proto.zoom.v1.ZoomMeetingInfo>}
 */
proto.zoom.v1.ZoomInfo.prototype.getZoomMeetingListList = function() {
  return /** @type{!Array<!proto.zoom.v1.ZoomMeetingInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zoom.v1.ZoomMeetingInfo, 2));
};


/**
 * @param {!Array<!proto.zoom.v1.ZoomMeetingInfo>} value
 * @return {!proto.zoom.v1.ZoomInfo} returns this
*/
proto.zoom.v1.ZoomInfo.prototype.setZoomMeetingListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.zoom.v1.ZoomMeetingInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zoom.v1.ZoomMeetingInfo}
 */
proto.zoom.v1.ZoomInfo.prototype.addZoomMeetingList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.zoom.v1.ZoomMeetingInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zoom.v1.ZoomInfo} returns this
 */
proto.zoom.v1.ZoomInfo.prototype.clearZoomMeetingListList = function() {
  return this.setZoomMeetingListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zoom.v1.ZoomMeetingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zoom.v1.ZoomMeetingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.ZoomMeetingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    joinUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hostId: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zoom.v1.ZoomMeetingInfo}
 */
proto.zoom.v1.ZoomMeetingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zoom.v1.ZoomMeetingInfo;
  return proto.zoom.v1.ZoomMeetingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zoom.v1.ZoomMeetingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zoom.v1.ZoomMeetingInfo}
 */
proto.zoom.v1.ZoomMeetingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJoinUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zoom.v1.ZoomMeetingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zoom.v1.ZoomMeetingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zoom.v1.ZoomMeetingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJoinUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHostId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.zoom.v1.ZoomMeetingInfo} returns this
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string created_at = 2;
 * @return {string}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.ZoomMeetingInfo} returns this
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string join_url = 3;
 * @return {string}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.getJoinUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.ZoomMeetingInfo} returns this
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.setJoinUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string start_url = 4;
 * @return {string}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.getStartUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.ZoomMeetingInfo} returns this
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.setStartUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string topic = 5;
 * @return {string}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.ZoomMeetingInfo} returns this
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string host_id = 6;
 * @return {string}
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.getHostId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.zoom.v1.ZoomMeetingInfo} returns this
 */
proto.zoom.v1.ZoomMeetingInfo.prototype.setHostId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.zoom.v1);
